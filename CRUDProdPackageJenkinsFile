pipeline {
    agent { label 'master' }
    options { skipDefaultCheckout() }
      stages {
		
		stage('Maven Build Package & Sonar analysis') {
			agent { label 'master' }
				steps {
				
				   script {
		                         
						cleanWs()
						checkout scm
						//sh "mvn clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false"
						sh "mvn sonar:sonar clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=CrudApp -Dsonar.host.url=http://10.62.125.9:8085/ -Dsonar.login=f16fabd2605044f38e79e4c0e4bc5f73c55dd144"				 
						
						   pom = readMavenPom file: "pom.xml";
						   env.POMVERSION = pom.version
						   sh 'echo  VERSION=$POMVERSION.$BUILD_NUMBER >> /tmp/pomversion.$BUILD_NUMBER.txt'
						   echo "******************* $POMVERSION*********"
						
						}
				}
		}	
		
		stage("XLDeploy Package") {
			agent { label 'master' }
            steps {
                script {
		     pom = readMavenPom file: "pom.xml";
		     POM_VERSION = "${pom.version}";
		     
                    if (env.BRANCH_NAME == 'master' | env.BRANCH_NAME == 'PR*' ) {
                       sh "sed -i 's/{{PACKAGE_VERSION}}/$BUILD_NUMBER/g' deployit-manifest.xml"
				sh "sed -i 's/{{Deploy-App}}/$JOB_BASE_NAME/g' deployit-manifest.xml"
				xldCreatePackage artifactsPath: 'target', manifestPath: 'deployit-manifest.xml', darPath: "${BUILD_NUMBER}.0.dar"
                    } else {
                       sh "sed -i 's/{{PACKAGE_VERSION}}/$pom.version.$BUILD_NUMBER/g' deployit-manifest.xml"
				sh "sed -i 's/{{Deploy-App}}/$JOB_BASE_NAME/g' deployit-manifest.xml"
				xldCreatePackage artifactsPath: 'target', manifestPath: 'deployit-manifest.xml', darPath: "${pom.version}.${BUILD_NUMBER}.dar"
                    }
                }
            }
             } 
		
		
		
		/*stage("XLDeploy Package") {
			agent { label 'master' }
			when {
				not {
					
						branch 'Re*' 
						branch 'master'
			
				}
			}
			steps {
				sh "sed -i 's/{{PACKAGE_VERSION}}/$BUILD_NUMBER/g' deployit-manifest.xml"
				sh "sed -i 's/{{Deploy-App}}/$JOB_BASE_NAME/g' deployit-manifest.xml"
				xldCreatePackage artifactsPath: 'target', manifestPath: 'deployit-manifest.xml', darPath: "${BUILD_NUMBER}.0.dar"
			
			}
		} */
		
		
		
		stage('XLDeploy Publish') {  
		agent { label 'master' }

			steps {
			
			script {
			 pom = readMavenPom file: "pom.xml";
			 if (env.BRANCH_NAME == 'master' | env.BRANCH_NAME == 'PR*' ) {
			 
                               xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "${BUILD_NUMBER}.0.dar"
                       } else {
		       
                             xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "${pom.version}.${BUILD_NUMBER}.dar"
                       }
				
	             }			
		 }
              } 
		stage('Test Automation') {
			
			steps {
				echo "test phase"
			}
		}							
	}     
        
    tools {
        maven 'maven3.3.9'
        jdk 'openjdk8'
    }
    post {
         always {
            echo 'JENKINS PIPELINE'
        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }     
}

